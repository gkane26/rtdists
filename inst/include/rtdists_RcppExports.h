// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_rtdists_RCPPEXPORTS_H_GEN_
#define RCPP_rtdists_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace rtdists {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("rtdists", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("rtdists", "_rtdists_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in rtdists");
            }
        }
    }

    inline NumericVector d_fastdm(NumericVector rts, NumericVector params, double precision = 3, int boundary = 2, bool stop_on_error = true) {
        typedef SEXP(*Ptr_d_fastdm)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_d_fastdm p_d_fastdm = NULL;
        if (p_d_fastdm == NULL) {
            validateSignature("NumericVector(*d_fastdm)(NumericVector,NumericVector,double,int,bool)");
            p_d_fastdm = (Ptr_d_fastdm)R_GetCCallable("rtdists", "_rtdists_d_fastdm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_d_fastdm(Shield<SEXP>(Rcpp::wrap(rts)), Shield<SEXP>(Rcpp::wrap(params)), Shield<SEXP>(Rcpp::wrap(precision)), Shield<SEXP>(Rcpp::wrap(boundary)), Shield<SEXP>(Rcpp::wrap(stop_on_error)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector p_fastdm(NumericVector rts, NumericVector params, double precision = 3, int boundary = 2, bool stop_on_error = true) {
        typedef SEXP(*Ptr_p_fastdm)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_p_fastdm p_p_fastdm = NULL;
        if (p_p_fastdm == NULL) {
            validateSignature("NumericVector(*p_fastdm)(NumericVector,NumericVector,double,int,bool)");
            p_p_fastdm = (Ptr_p_fastdm)R_GetCCallable("rtdists", "_rtdists_p_fastdm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_p_fastdm(Shield<SEXP>(Rcpp::wrap(rts)), Shield<SEXP>(Rcpp::wrap(params)), Shield<SEXP>(Rcpp::wrap(precision)), Shield<SEXP>(Rcpp::wrap(boundary)), Shield<SEXP>(Rcpp::wrap(stop_on_error)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector p_precise_fastdm(NumericVector rts, NumericVector params, double precision = 3, int boundary = 2, bool stop_on_error = true) {
        typedef SEXP(*Ptr_p_precise_fastdm)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_p_precise_fastdm p_p_precise_fastdm = NULL;
        if (p_p_precise_fastdm == NULL) {
            validateSignature("NumericVector(*p_precise_fastdm)(NumericVector,NumericVector,double,int,bool)");
            p_p_precise_fastdm = (Ptr_p_precise_fastdm)R_GetCCallable("rtdists", "_rtdists_p_precise_fastdm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_p_precise_fastdm(Shield<SEXP>(Rcpp::wrap(rts)), Shield<SEXP>(Rcpp::wrap(params)), Shield<SEXP>(Rcpp::wrap(precision)), Shield<SEXP>(Rcpp::wrap(boundary)), Shield<SEXP>(Rcpp::wrap(stop_on_error)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline List r_fastdm(int num_values, NumericVector params, double precision = 3, bool stop_on_error = true) {
        typedef SEXP(*Ptr_r_fastdm)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_r_fastdm p_r_fastdm = NULL;
        if (p_r_fastdm == NULL) {
            validateSignature("List(*r_fastdm)(int,NumericVector,double,bool)");
            p_r_fastdm = (Ptr_r_fastdm)R_GetCCallable("rtdists", "_rtdists_r_fastdm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_r_fastdm(Shield<SEXP>(Rcpp::wrap(num_values)), Shield<SEXP>(Rcpp::wrap(params)), Shield<SEXP>(Rcpp::wrap(precision)), Shield<SEXP>(Rcpp::wrap(stop_on_error)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_rtdists_RCPPEXPORTS_H_GEN_
